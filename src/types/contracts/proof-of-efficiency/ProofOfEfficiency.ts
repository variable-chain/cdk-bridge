/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PolygonRollupBaseEtrog {
  export type BatchDataStruct = {
    transactions: PromiseOrValue<BytesLike>;
    forcedGlobalExitRoot: PromiseOrValue<BytesLike>;
    forcedTimestamp: PromiseOrValue<BigNumberish>;
    forcedBlockHashL1: PromiseOrValue<BytesLike>;
  };

  export type BatchDataStructOutput = [string, string, BigNumber, string] & {
    transactions: string;
    forcedGlobalExitRoot: string;
    forcedTimestamp: BigNumber;
    forcedBlockHashL1: string;
  };
}

export interface ProofOfEfficiencyInterface extends utils.Interface {
  functions: {
    "GLOBAL_EXIT_ROOT_MANAGER_L2()": FunctionFragment;
    "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN()": FunctionFragment;
    "INITIALIZE_TX_BRIDGE_PARAMS()": FunctionFragment;
    "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS()": FunctionFragment;
    "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA()": FunctionFragment;
    "INITIALIZE_TX_CONSTANT_BYTES()": FunctionFragment;
    "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA()": FunctionFragment;
    "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA()": FunctionFragment;
    "INITIALIZE_TX_EFFECTIVE_PERCENTAGE()": FunctionFragment;
    "SIGNATURE_INITIALIZE_TX_R()": FunctionFragment;
    "SIGNATURE_INITIALIZE_TX_S()": FunctionFragment;
    "SIGNATURE_INITIALIZE_TX_V()": FunctionFragment;
    "acceptAdminRole()": FunctionFragment;
    "activateForceBatches()": FunctionFragment;
    "admin()": FunctionFragment;
    "bridgeAddress()": FunctionFragment;
    "calculatePolPerForceBatch()": FunctionFragment;
    "forceBatch(bytes,uint256)": FunctionFragment;
    "forceBatchTimeout()": FunctionFragment;
    "forcedBatches(uint64)": FunctionFragment;
    "gapLastTimestamp()": FunctionFragment;
    "gasTokenAddress()": FunctionFragment;
    "gasTokenNetwork()": FunctionFragment;
    "generateInitializeTransaction(uint32,address,uint32,bytes)": FunctionFragment;
    "globalExitRootManager()": FunctionFragment;
    "initialize(address,address,uint32,address,string,string)": FunctionFragment;
    "isForcedBatchAllowed()": FunctionFragment;
    "lastAccInputHash()": FunctionFragment;
    "lastForceBatch()": FunctionFragment;
    "lastForceBatchSequenced()": FunctionFragment;
    "networkName()": FunctionFragment;
    "onVerifyBatches(uint64,bytes32,address)": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pol()": FunctionFragment;
    "rollupManager()": FunctionFragment;
    "sequenceBatches((bytes,bytes32,uint64,bytes32)[],address)": FunctionFragment;
    "sequenceForceBatches((bytes,bytes32,uint64,bytes32)[])": FunctionFragment;
    "setForceBatchTimeout(uint64)": FunctionFragment;
    "setTrustedSequencer(address)": FunctionFragment;
    "setTrustedSequencerURL(string)": FunctionFragment;
    "transferAdminRole(address)": FunctionFragment;
    "trustedSequencer()": FunctionFragment;
    "trustedSequencerURL()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GLOBAL_EXIT_ROOT_MANAGER_L2"
      | "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN"
      | "INITIALIZE_TX_BRIDGE_PARAMS"
      | "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS"
      | "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA"
      | "INITIALIZE_TX_CONSTANT_BYTES"
      | "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA"
      | "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA"
      | "INITIALIZE_TX_EFFECTIVE_PERCENTAGE"
      | "SIGNATURE_INITIALIZE_TX_R"
      | "SIGNATURE_INITIALIZE_TX_S"
      | "SIGNATURE_INITIALIZE_TX_V"
      | "acceptAdminRole"
      | "activateForceBatches"
      | "admin"
      | "bridgeAddress"
      | "calculatePolPerForceBatch"
      | "forceBatch"
      | "forceBatchTimeout"
      | "forcedBatches"
      | "gapLastTimestamp"
      | "gasTokenAddress"
      | "gasTokenNetwork"
      | "generateInitializeTransaction"
      | "globalExitRootManager"
      | "initialize"
      | "isForcedBatchAllowed"
      | "lastAccInputHash"
      | "lastForceBatch"
      | "lastForceBatchSequenced"
      | "networkName"
      | "onVerifyBatches"
      | "pendingAdmin"
      | "pol"
      | "rollupManager"
      | "sequenceBatches"
      | "sequenceForceBatches"
      | "setForceBatchTimeout"
      | "setTrustedSequencer"
      | "setTrustedSequencerURL"
      | "transferAdminRole"
      | "trustedSequencer"
      | "trustedSequencerURL"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GLOBAL_EXIT_ROOT_MANAGER_L2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_CONSTANT_BYTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIALIZE_TX_EFFECTIVE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_INITIALIZE_TX_R",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_INITIALIZE_TX_S",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_INITIALIZE_TX_V",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateForceBatches",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePolPerForceBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceBatch",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBatchTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forcedBatches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gapLastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasTokenNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateInitializeTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalExitRootManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isForcedBatchAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAccInputHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastForceBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastForceBatchSequenced",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onVerifyBatches",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rollupManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceBatches",
    values: [PolygonRollupBaseEtrog.BatchDataStruct[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceForceBatches",
    values: [PolygonRollupBaseEtrog.BatchDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceBatchTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSequencerURL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSequencer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSequencerURL",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GLOBAL_EXIT_ROOT_MANAGER_L2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_CONSTANT_BYTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIALIZE_TX_EFFECTIVE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_INITIALIZE_TX_R",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_INITIALIZE_TX_S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_INITIALIZE_TX_V",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateForceBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePolPerForceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceBatchTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forcedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gapLastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasTokenNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateInitializeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalExitRootManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForcedBatchAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAccInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastForceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastForceBatchSequenced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVerifyBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollupManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequenceBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequenceForceBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceBatchTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSequencerURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSequencerURL",
    data: BytesLike
  ): Result;

  events: {
    "AcceptAdminRole(address)": EventFragment;
    "ActivateForceBatches()": EventFragment;
    "ForceBatch(uint64,bytes32,address,bytes)": EventFragment;
    "InitialSequenceBatches(bytes,bytes32,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "SequenceBatches(uint64,bytes32)": EventFragment;
    "SequenceForceBatches(uint64)": EventFragment;
    "SetForceBatchTimeout(uint64)": EventFragment;
    "SetTrustedSequencer(address)": EventFragment;
    "SetTrustedSequencerURL(string)": EventFragment;
    "TransferAdminRole(address)": EventFragment;
    "VerifyBatches(uint64,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptAdminRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivateForceBatches"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialSequenceBatches"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequenceBatches"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequenceForceBatches"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForceBatchTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedSequencer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedSequencerURL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferAdminRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifyBatches"): EventFragment;
}

export interface AcceptAdminRoleEventObject {
  newAdmin: string;
}
export type AcceptAdminRoleEvent = TypedEvent<
  [string],
  AcceptAdminRoleEventObject
>;

export type AcceptAdminRoleEventFilter = TypedEventFilter<AcceptAdminRoleEvent>;

export interface ActivateForceBatchesEventObject {}
export type ActivateForceBatchesEvent = TypedEvent<
  [],
  ActivateForceBatchesEventObject
>;

export type ActivateForceBatchesEventFilter =
  TypedEventFilter<ActivateForceBatchesEvent>;

export interface ForceBatchEventObject {
  forceBatchNum: BigNumber;
  lastGlobalExitRoot: string;
  sequencer: string;
  transactions: string;
}
export type ForceBatchEvent = TypedEvent<
  [BigNumber, string, string, string],
  ForceBatchEventObject
>;

export type ForceBatchEventFilter = TypedEventFilter<ForceBatchEvent>;

export interface InitialSequenceBatchesEventObject {
  transactions: string;
  lastGlobalExitRoot: string;
  sequencer: string;
}
export type InitialSequenceBatchesEvent = TypedEvent<
  [string, string, string],
  InitialSequenceBatchesEventObject
>;

export type InitialSequenceBatchesEventFilter =
  TypedEventFilter<InitialSequenceBatchesEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SequenceBatchesEventObject {
  numBatch: BigNumber;
  l1InfoRoot: string;
}
export type SequenceBatchesEvent = TypedEvent<
  [BigNumber, string],
  SequenceBatchesEventObject
>;

export type SequenceBatchesEventFilter = TypedEventFilter<SequenceBatchesEvent>;

export interface SequenceForceBatchesEventObject {
  numBatch: BigNumber;
}
export type SequenceForceBatchesEvent = TypedEvent<
  [BigNumber],
  SequenceForceBatchesEventObject
>;

export type SequenceForceBatchesEventFilter =
  TypedEventFilter<SequenceForceBatchesEvent>;

export interface SetForceBatchTimeoutEventObject {
  newforceBatchTimeout: BigNumber;
}
export type SetForceBatchTimeoutEvent = TypedEvent<
  [BigNumber],
  SetForceBatchTimeoutEventObject
>;

export type SetForceBatchTimeoutEventFilter =
  TypedEventFilter<SetForceBatchTimeoutEvent>;

export interface SetTrustedSequencerEventObject {
  newTrustedSequencer: string;
}
export type SetTrustedSequencerEvent = TypedEvent<
  [string],
  SetTrustedSequencerEventObject
>;

export type SetTrustedSequencerEventFilter =
  TypedEventFilter<SetTrustedSequencerEvent>;

export interface SetTrustedSequencerURLEventObject {
  newTrustedSequencerURL: string;
}
export type SetTrustedSequencerURLEvent = TypedEvent<
  [string],
  SetTrustedSequencerURLEventObject
>;

export type SetTrustedSequencerURLEventFilter =
  TypedEventFilter<SetTrustedSequencerURLEvent>;

export interface TransferAdminRoleEventObject {
  newPendingAdmin: string;
}
export type TransferAdminRoleEvent = TypedEvent<
  [string],
  TransferAdminRoleEventObject
>;

export type TransferAdminRoleEventFilter =
  TypedEventFilter<TransferAdminRoleEvent>;

export interface VerifyBatchesEventObject {
  numBatch: BigNumber;
  stateRoot: string;
  aggregator: string;
}
export type VerifyBatchesEvent = TypedEvent<
  [BigNumber, string, string],
  VerifyBatchesEventObject
>;

export type VerifyBatchesEventFilter = TypedEventFilter<VerifyBatchesEvent>;

export interface ProofOfEfficiency extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProofOfEfficiencyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GLOBAL_EXIT_ROOT_MANAGER_L2(overrides?: CallOverrides): Promise<[string]>;

    INITIALIZE_TX_BRIDGE_LIST_LEN_LEN(
      overrides?: CallOverrides
    ): Promise<[number]>;

    INITIALIZE_TX_BRIDGE_PARAMS(overrides?: CallOverrides): Promise<[string]>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<[string]>;

    INITIALIZE_TX_CONSTANT_BYTES(overrides?: CallOverrides): Promise<[number]>;

    INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<[number]>;

    INITIALIZE_TX_DATA_LEN_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<[number]>;

    INITIALIZE_TX_EFFECTIVE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SIGNATURE_INITIALIZE_TX_R(overrides?: CallOverrides): Promise<[string]>;

    SIGNATURE_INITIALIZE_TX_S(overrides?: CallOverrides): Promise<[string]>;

    SIGNATURE_INITIALIZE_TX_V(overrides?: CallOverrides): Promise<[number]>;

    acceptAdminRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateForceBatches(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    bridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    calculatePolPerForceBatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceBatch(
      transactions: PromiseOrValue<BytesLike>,
      polAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceBatchTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    forcedBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gapLastTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    gasTokenNetwork(overrides?: CallOverrides): Promise<[number]>;

    generateInitializeTransaction(
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      _gasTokenNetwork: PromiseOrValue<BigNumberish>,
      _gasTokenMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalExitRootManager(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      _networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isForcedBatchAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    lastAccInputHash(overrides?: CallOverrides): Promise<[string]>;

    lastForceBatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastForceBatchSequenced(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkName(overrides?: CallOverrides): Promise<[string]>;

    onVerifyBatches(
      lastVerifiedBatch: PromiseOrValue<BigNumberish>,
      newStateRoot: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pol(overrides?: CallOverrides): Promise<[string]>;

    rollupManager(overrides?: CallOverrides): Promise<[string]>;

    sequenceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      l2Coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequenceForceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setForceBatchTimeout(
      newforceBatchTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedSequencer(
      newTrustedSequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedSequencerURL(
      newTrustedSequencerURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAdminRole(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedSequencer(overrides?: CallOverrides): Promise<[string]>;

    trustedSequencerURL(overrides?: CallOverrides): Promise<[string]>;
  };

  GLOBAL_EXIT_ROOT_MANAGER_L2(overrides?: CallOverrides): Promise<string>;

  INITIALIZE_TX_BRIDGE_LIST_LEN_LEN(overrides?: CallOverrides): Promise<number>;

  INITIALIZE_TX_BRIDGE_PARAMS(overrides?: CallOverrides): Promise<string>;

  INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS(
    overrides?: CallOverrides
  ): Promise<string>;

  INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA(
    overrides?: CallOverrides
  ): Promise<string>;

  INITIALIZE_TX_CONSTANT_BYTES(overrides?: CallOverrides): Promise<number>;

  INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA(
    overrides?: CallOverrides
  ): Promise<number>;

  INITIALIZE_TX_DATA_LEN_EMPTY_METADATA(
    overrides?: CallOverrides
  ): Promise<number>;

  INITIALIZE_TX_EFFECTIVE_PERCENTAGE(
    overrides?: CallOverrides
  ): Promise<string>;

  SIGNATURE_INITIALIZE_TX_R(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_INITIALIZE_TX_S(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_INITIALIZE_TX_V(overrides?: CallOverrides): Promise<number>;

  acceptAdminRole(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateForceBatches(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  bridgeAddress(overrides?: CallOverrides): Promise<string>;

  calculatePolPerForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

  forceBatch(
    transactions: PromiseOrValue<BytesLike>,
    polAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceBatchTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  forcedBatches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  gapLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  gasTokenAddress(overrides?: CallOverrides): Promise<string>;

  gasTokenNetwork(overrides?: CallOverrides): Promise<number>;

  generateInitializeTransaction(
    networkID: PromiseOrValue<BigNumberish>,
    _gasTokenAddress: PromiseOrValue<string>,
    _gasTokenNetwork: PromiseOrValue<BigNumberish>,
    _gasTokenMetadata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalExitRootManager(overrides?: CallOverrides): Promise<string>;

  initialize(
    _admin: PromiseOrValue<string>,
    sequencer: PromiseOrValue<string>,
    networkID: PromiseOrValue<BigNumberish>,
    _gasTokenAddress: PromiseOrValue<string>,
    sequencerURL: PromiseOrValue<string>,
    _networkName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isForcedBatchAllowed(overrides?: CallOverrides): Promise<boolean>;

  lastAccInputHash(overrides?: CallOverrides): Promise<string>;

  lastForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

  lastForceBatchSequenced(overrides?: CallOverrides): Promise<BigNumber>;

  networkName(overrides?: CallOverrides): Promise<string>;

  onVerifyBatches(
    lastVerifiedBatch: PromiseOrValue<BigNumberish>,
    newStateRoot: PromiseOrValue<BytesLike>,
    aggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pol(overrides?: CallOverrides): Promise<string>;

  rollupManager(overrides?: CallOverrides): Promise<string>;

  sequenceBatches(
    batches: PolygonRollupBaseEtrog.BatchDataStruct[],
    l2Coinbase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequenceForceBatches(
    batches: PolygonRollupBaseEtrog.BatchDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setForceBatchTimeout(
    newforceBatchTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedSequencer(
    newTrustedSequencer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedSequencerURL(
    newTrustedSequencerURL: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAdminRole(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedSequencer(overrides?: CallOverrides): Promise<string>;

  trustedSequencerURL(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GLOBAL_EXIT_ROOT_MANAGER_L2(overrides?: CallOverrides): Promise<string>;

    INITIALIZE_TX_BRIDGE_LIST_LEN_LEN(
      overrides?: CallOverrides
    ): Promise<number>;

    INITIALIZE_TX_BRIDGE_PARAMS(overrides?: CallOverrides): Promise<string>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<string>;

    INITIALIZE_TX_CONSTANT_BYTES(overrides?: CallOverrides): Promise<number>;

    INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<number>;

    INITIALIZE_TX_DATA_LEN_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<number>;

    INITIALIZE_TX_EFFECTIVE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<string>;

    SIGNATURE_INITIALIZE_TX_R(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_INITIALIZE_TX_S(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_INITIALIZE_TX_V(overrides?: CallOverrides): Promise<number>;

    acceptAdminRole(overrides?: CallOverrides): Promise<void>;

    activateForceBatches(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    bridgeAddress(overrides?: CallOverrides): Promise<string>;

    calculatePolPerForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

    forceBatch(
      transactions: PromiseOrValue<BytesLike>,
      polAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceBatchTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    forcedBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gapLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gasTokenAddress(overrides?: CallOverrides): Promise<string>;

    gasTokenNetwork(overrides?: CallOverrides): Promise<number>;

    generateInitializeTransaction(
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      _gasTokenNetwork: PromiseOrValue<BigNumberish>,
      _gasTokenMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalExitRootManager(overrides?: CallOverrides): Promise<string>;

    initialize(
      _admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      _networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isForcedBatchAllowed(overrides?: CallOverrides): Promise<boolean>;

    lastAccInputHash(overrides?: CallOverrides): Promise<string>;

    lastForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

    lastForceBatchSequenced(overrides?: CallOverrides): Promise<BigNumber>;

    networkName(overrides?: CallOverrides): Promise<string>;

    onVerifyBatches(
      lastVerifiedBatch: PromiseOrValue<BigNumberish>,
      newStateRoot: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pol(overrides?: CallOverrides): Promise<string>;

    rollupManager(overrides?: CallOverrides): Promise<string>;

    sequenceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      l2Coinbase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sequenceForceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setForceBatchTimeout(
      newforceBatchTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedSequencer(
      newTrustedSequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedSequencerURL(
      newTrustedSequencerURL: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAdminRole(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSequencer(overrides?: CallOverrides): Promise<string>;

    trustedSequencerURL(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AcceptAdminRole(address)"(newAdmin?: null): AcceptAdminRoleEventFilter;
    AcceptAdminRole(newAdmin?: null): AcceptAdminRoleEventFilter;

    "ActivateForceBatches()"(): ActivateForceBatchesEventFilter;
    ActivateForceBatches(): ActivateForceBatchesEventFilter;

    "ForceBatch(uint64,bytes32,address,bytes)"(
      forceBatchNum?: PromiseOrValue<BigNumberish> | null,
      lastGlobalExitRoot?: null,
      sequencer?: null,
      transactions?: null
    ): ForceBatchEventFilter;
    ForceBatch(
      forceBatchNum?: PromiseOrValue<BigNumberish> | null,
      lastGlobalExitRoot?: null,
      sequencer?: null,
      transactions?: null
    ): ForceBatchEventFilter;

    "InitialSequenceBatches(bytes,bytes32,address)"(
      transactions?: null,
      lastGlobalExitRoot?: null,
      sequencer?: null
    ): InitialSequenceBatchesEventFilter;
    InitialSequenceBatches(
      transactions?: null,
      lastGlobalExitRoot?: null,
      sequencer?: null
    ): InitialSequenceBatchesEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "SequenceBatches(uint64,bytes32)"(
      numBatch?: PromiseOrValue<BigNumberish> | null,
      l1InfoRoot?: null
    ): SequenceBatchesEventFilter;
    SequenceBatches(
      numBatch?: PromiseOrValue<BigNumberish> | null,
      l1InfoRoot?: null
    ): SequenceBatchesEventFilter;

    "SequenceForceBatches(uint64)"(
      numBatch?: PromiseOrValue<BigNumberish> | null
    ): SequenceForceBatchesEventFilter;
    SequenceForceBatches(
      numBatch?: PromiseOrValue<BigNumberish> | null
    ): SequenceForceBatchesEventFilter;

    "SetForceBatchTimeout(uint64)"(
      newforceBatchTimeout?: null
    ): SetForceBatchTimeoutEventFilter;
    SetForceBatchTimeout(
      newforceBatchTimeout?: null
    ): SetForceBatchTimeoutEventFilter;

    "SetTrustedSequencer(address)"(
      newTrustedSequencer?: null
    ): SetTrustedSequencerEventFilter;
    SetTrustedSequencer(
      newTrustedSequencer?: null
    ): SetTrustedSequencerEventFilter;

    "SetTrustedSequencerURL(string)"(
      newTrustedSequencerURL?: null
    ): SetTrustedSequencerURLEventFilter;
    SetTrustedSequencerURL(
      newTrustedSequencerURL?: null
    ): SetTrustedSequencerURLEventFilter;

    "TransferAdminRole(address)"(
      newPendingAdmin?: null
    ): TransferAdminRoleEventFilter;
    TransferAdminRole(newPendingAdmin?: null): TransferAdminRoleEventFilter;

    "VerifyBatches(uint64,bytes32,address)"(
      numBatch?: PromiseOrValue<BigNumberish> | null,
      stateRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesEventFilter;
    VerifyBatches(
      numBatch?: PromiseOrValue<BigNumberish> | null,
      stateRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesEventFilter;
  };

  estimateGas: {
    GLOBAL_EXIT_ROOT_MANAGER_L2(overrides?: CallOverrides): Promise<BigNumber>;

    INITIALIZE_TX_BRIDGE_LIST_LEN_LEN(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIALIZE_TX_BRIDGE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIALIZE_TX_CONSTANT_BYTES(overrides?: CallOverrides): Promise<BigNumber>;

    INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIALIZE_TX_DATA_LEN_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIALIZE_TX_EFFECTIVE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_INITIALIZE_TX_R(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_INITIALIZE_TX_S(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_INITIALIZE_TX_V(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdminRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateForceBatches(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePolPerForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

    forceBatch(
      transactions: PromiseOrValue<BytesLike>,
      polAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceBatchTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    forcedBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gapLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gasTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    gasTokenNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    generateInitializeTransaction(
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      _gasTokenNetwork: PromiseOrValue<BigNumberish>,
      _gasTokenMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalExitRootManager(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      _networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isForcedBatchAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    lastAccInputHash(overrides?: CallOverrides): Promise<BigNumber>;

    lastForceBatch(overrides?: CallOverrides): Promise<BigNumber>;

    lastForceBatchSequenced(overrides?: CallOverrides): Promise<BigNumber>;

    networkName(overrides?: CallOverrides): Promise<BigNumber>;

    onVerifyBatches(
      lastVerifiedBatch: PromiseOrValue<BigNumberish>,
      newStateRoot: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pol(overrides?: CallOverrides): Promise<BigNumber>;

    rollupManager(overrides?: CallOverrides): Promise<BigNumber>;

    sequenceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      l2Coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequenceForceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setForceBatchTimeout(
      newforceBatchTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedSequencer(
      newTrustedSequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedSequencerURL(
      newTrustedSequencerURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAdminRole(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedSequencer(overrides?: CallOverrides): Promise<BigNumber>;

    trustedSequencerURL(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GLOBAL_EXIT_ROOT_MANAGER_L2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_BRIDGE_LIST_LEN_LEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_BRIDGE_PARAMS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_CONSTANT_BYTES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_DATA_LEN_EMPTY_METADATA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIALIZE_TX_EFFECTIVE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_INITIALIZE_TX_R(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_INITIALIZE_TX_S(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_INITIALIZE_TX_V(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAdminRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateForceBatches(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePolPerForceBatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceBatch(
      transactions: PromiseOrValue<BytesLike>,
      polAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceBatchTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcedBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gapLastTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasTokenNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateInitializeTransaction(
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      _gasTokenNetwork: PromiseOrValue<BigNumberish>,
      _gasTokenMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalExitRootManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      networkID: PromiseOrValue<BigNumberish>,
      _gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      _networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isForcedBatchAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAccInputHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastForceBatch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastForceBatchSequenced(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onVerifyBatches(
      lastVerifiedBatch: PromiseOrValue<BigNumberish>,
      newStateRoot: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequenceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      l2Coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequenceForceBatches(
      batches: PolygonRollupBaseEtrog.BatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setForceBatchTimeout(
      newforceBatchTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedSequencer(
      newTrustedSequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedSequencerURL(
      newTrustedSequencerURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAdminRole(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedSequencer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trustedSequencerURL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
