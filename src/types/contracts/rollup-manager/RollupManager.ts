/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LegacyZKEVMStateVariables {
  export type PendingStateStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    lastVerifiedBatch: PromiseOrValue<BigNumberish>;
    exitRoot: PromiseOrValue<BytesLike>;
    stateRoot: PromiseOrValue<BytesLike>;
  };

  export type PendingStateStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    timestamp: BigNumber;
    lastVerifiedBatch: BigNumber;
    exitRoot: string;
    stateRoot: string;
  };

  export type SequencedBatchDataStruct = {
    accInputHash: PromiseOrValue<BytesLike>;
    sequencedTimestamp: PromiseOrValue<BigNumberish>;
    previousLastBatchSequenced: PromiseOrValue<BigNumberish>;
  };

  export type SequencedBatchDataStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    accInputHash: string;
    sequencedTimestamp: BigNumber;
    previousLastBatchSequenced: BigNumber;
  };
}

export interface RollupManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "activateEmergencyState()": FunctionFragment;
    "addExistingRollup(address,address,uint64,uint64,bytes32,uint8)": FunctionFragment;
    "addNewRollupType(address,address,uint64,uint8,bytes32,string)": FunctionFragment;
    "bridgeAddress()": FunctionFragment;
    "calculateRewardPerBatch()": FunctionFragment;
    "chainIDToRollupID(uint64)": FunctionFragment;
    "consolidatePendingState(uint32,uint64)": FunctionFragment;
    "createNewRollup(uint32,uint64,address,address,address,string,string)": FunctionFragment;
    "deactivateEmergencyState()": FunctionFragment;
    "getBatchFee()": FunctionFragment;
    "getForcedBatchFee()": FunctionFragment;
    "getInputSnarkBytes(uint32,uint64,uint64,bytes32,bytes32,bytes32)": FunctionFragment;
    "getLastVerifiedBatch(uint32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRollupBatchNumToStateRoot(uint32,uint64)": FunctionFragment;
    "getRollupExitRoot()": FunctionFragment;
    "getRollupPendingStateTransitions(uint32,uint64)": FunctionFragment;
    "getRollupSequencedBatches(uint32,uint64)": FunctionFragment;
    "globalExitRootManager()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint64,uint64,address,address,address,address,address,uint64,uint64)": FunctionFragment;
    "isEmergencyState()": FunctionFragment;
    "isPendingStateConsolidable(uint32,uint64)": FunctionFragment;
    "lastAggregationTimestamp()": FunctionFragment;
    "multiplierBatchFee()": FunctionFragment;
    "obsoleteRollupType(uint32)": FunctionFragment;
    "onSequenceBatches(uint64,bytes32)": FunctionFragment;
    "overridePendingState(uint32,uint64,uint64,uint64,uint64,bytes32,bytes32,bytes32[24])": FunctionFragment;
    "pendingStateTimeout()": FunctionFragment;
    "pol()": FunctionFragment;
    "proveNonDeterministicPendingState(uint32,uint64,uint64,uint64,uint64,bytes32,bytes32,bytes32[24])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rollupAddressToID(address)": FunctionFragment;
    "rollupCount()": FunctionFragment;
    "rollupIDToRollupData(uint32)": FunctionFragment;
    "rollupTypeCount()": FunctionFragment;
    "rollupTypeMap(uint32)": FunctionFragment;
    "setBatchFee(uint256)": FunctionFragment;
    "setMultiplierBatchFee(uint16)": FunctionFragment;
    "setPendingStateTimeout(uint64)": FunctionFragment;
    "setTrustedAggregatorTimeout(uint64)": FunctionFragment;
    "setVerifyBatchTimeTarget(uint64)": FunctionFragment;
    "totalSequencedBatches()": FunctionFragment;
    "totalVerifiedBatches()": FunctionFragment;
    "trustedAggregatorTimeout()": FunctionFragment;
    "updateRollup(address,uint32,bytes)": FunctionFragment;
    "verifyBatchTimeTarget()": FunctionFragment;
    "verifyBatches(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])": FunctionFragment;
    "verifyBatchesTrustedAggregator(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "activateEmergencyState"
      | "addExistingRollup"
      | "addNewRollupType"
      | "bridgeAddress"
      | "calculateRewardPerBatch"
      | "chainIDToRollupID"
      | "consolidatePendingState"
      | "createNewRollup"
      | "deactivateEmergencyState"
      | "getBatchFee"
      | "getForcedBatchFee"
      | "getInputSnarkBytes"
      | "getLastVerifiedBatch"
      | "getRoleAdmin"
      | "getRollupBatchNumToStateRoot"
      | "getRollupExitRoot"
      | "getRollupPendingStateTransitions"
      | "getRollupSequencedBatches"
      | "globalExitRootManager"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isEmergencyState"
      | "isPendingStateConsolidable"
      | "lastAggregationTimestamp"
      | "multiplierBatchFee"
      | "obsoleteRollupType"
      | "onSequenceBatches"
      | "overridePendingState"
      | "pendingStateTimeout"
      | "pol"
      | "proveNonDeterministicPendingState"
      | "renounceRole"
      | "revokeRole"
      | "rollupAddressToID"
      | "rollupCount"
      | "rollupIDToRollupData"
      | "rollupTypeCount"
      | "rollupTypeMap"
      | "setBatchFee"
      | "setMultiplierBatchFee"
      | "setPendingStateTimeout"
      | "setTrustedAggregatorTimeout"
      | "setVerifyBatchTimeTarget"
      | "totalSequencedBatches"
      | "totalVerifiedBatches"
      | "trustedAggregatorTimeout"
      | "updateRollup"
      | "verifyBatchTimeTarget"
      | "verifyBatches"
      | "verifyBatchesTrustedAggregator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addExistingRollup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewRollupType",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardPerBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIDToRollupID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "consolidatePendingState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewRollup",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForcedBatchFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputSnarkBytes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastVerifiedBatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupBatchNumToStateRoot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupExitRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupPendingStateTransitions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupSequencedBatches",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalExitRootManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingStateConsolidable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAggregationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierBatchFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "obsoleteRollupType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onSequenceBatches",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "overridePendingState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingStateTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveNonDeterministicPendingState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupAddressToID",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupIDToRollupData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupTypeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupTypeMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplierBatchFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingStateTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedAggregatorTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyBatchTimeTarget",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSequencedBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVerifiedBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedAggregatorTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRollup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBatchTimeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBatches",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBatchesTrustedAggregator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExistingRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewRollupType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardPerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIDToRollupID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consolidatePendingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForcedBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputSnarkBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastVerifiedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupBatchNumToStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupExitRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupPendingStateTransitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupSequencedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalExitRootManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPendingStateConsolidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAggregationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "obsoleteRollupType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSequenceBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overridePendingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingStateTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveNonDeterministicPendingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollupAddressToID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupIDToRollupData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupTypeMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplierBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingStateTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedAggregatorTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyBatchTimeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSequencedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVerifiedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedAggregatorTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBatchTimeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBatchesTrustedAggregator",
    data: BytesLike
  ): Result;

  events: {
    "AddExistingRollup(uint32,uint64,address,uint64,uint8,uint64)": EventFragment;
    "AddNewRollupType(uint32,address,address,uint64,uint8,bytes32,string)": EventFragment;
    "ConsolidatePendingState(uint32,uint64,bytes32,bytes32,uint64)": EventFragment;
    "CreateNewRollup(uint32,uint32,address,uint64,address)": EventFragment;
    "EmergencyStateActivated()": EventFragment;
    "EmergencyStateDeactivated()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ObsoleteRollupType(uint32)": EventFragment;
    "OnSequenceBatches(uint32,uint64)": EventFragment;
    "OverridePendingState(uint32,uint64,bytes32,bytes32,address)": EventFragment;
    "ProveNonDeterministicPendingState(bytes32,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetBatchFee(uint256)": EventFragment;
    "SetMultiplierBatchFee(uint16)": EventFragment;
    "SetPendingStateTimeout(uint64)": EventFragment;
    "SetTrustedAggregator(address)": EventFragment;
    "SetTrustedAggregatorTimeout(uint64)": EventFragment;
    "SetVerifyBatchTimeTarget(uint64)": EventFragment;
    "UpdateRollup(uint32,uint32,uint64)": EventFragment;
    "VerifyBatches(uint32,uint64,bytes32,bytes32,address)": EventFragment;
    "VerifyBatchesTrustedAggregator(uint32,uint64,bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddExistingRollup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddNewRollupType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsolidatePendingState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateNewRollup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStateActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStateDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObsoleteRollupType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSequenceBatches"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OverridePendingState"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProveNonDeterministicPendingState"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBatchFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMultiplierBatchFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPendingStateTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedAggregator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetTrustedAggregatorTimeout"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVerifyBatchTimeTarget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRollup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifyBatches"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VerifyBatchesTrustedAggregator"
  ): EventFragment;
}

export interface AddExistingRollupEventObject {
  rollupID: number;
  forkID: BigNumber;
  rollupAddress: string;
  chainID: BigNumber;
  rollupCompatibilityID: number;
  lastVerifiedBatchBeforeUpgrade: BigNumber;
}
export type AddExistingRollupEvent = TypedEvent<
  [number, BigNumber, string, BigNumber, number, BigNumber],
  AddExistingRollupEventObject
>;

export type AddExistingRollupEventFilter =
  TypedEventFilter<AddExistingRollupEvent>;

export interface AddNewRollupTypeEventObject {
  rollupTypeID: number;
  consensusImplementation: string;
  verifier: string;
  forkID: BigNumber;
  rollupCompatibilityID: number;
  genesis: string;
  description: string;
}
export type AddNewRollupTypeEvent = TypedEvent<
  [number, string, string, BigNumber, number, string, string],
  AddNewRollupTypeEventObject
>;

export type AddNewRollupTypeEventFilter =
  TypedEventFilter<AddNewRollupTypeEvent>;

export interface ConsolidatePendingStateEventObject {
  rollupID: number;
  numBatch: BigNumber;
  stateRoot: string;
  exitRoot: string;
  pendingStateNum: BigNumber;
}
export type ConsolidatePendingStateEvent = TypedEvent<
  [number, BigNumber, string, string, BigNumber],
  ConsolidatePendingStateEventObject
>;

export type ConsolidatePendingStateEventFilter =
  TypedEventFilter<ConsolidatePendingStateEvent>;

export interface CreateNewRollupEventObject {
  rollupID: number;
  rollupTypeID: number;
  rollupAddress: string;
  chainID: BigNumber;
  gasTokenAddress: string;
}
export type CreateNewRollupEvent = TypedEvent<
  [number, number, string, BigNumber, string],
  CreateNewRollupEventObject
>;

export type CreateNewRollupEventFilter = TypedEventFilter<CreateNewRollupEvent>;

export interface EmergencyStateActivatedEventObject {}
export type EmergencyStateActivatedEvent = TypedEvent<
  [],
  EmergencyStateActivatedEventObject
>;

export type EmergencyStateActivatedEventFilter =
  TypedEventFilter<EmergencyStateActivatedEvent>;

export interface EmergencyStateDeactivatedEventObject {}
export type EmergencyStateDeactivatedEvent = TypedEvent<
  [],
  EmergencyStateDeactivatedEventObject
>;

export type EmergencyStateDeactivatedEventFilter =
  TypedEventFilter<EmergencyStateDeactivatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ObsoleteRollupTypeEventObject {
  rollupTypeID: number;
}
export type ObsoleteRollupTypeEvent = TypedEvent<
  [number],
  ObsoleteRollupTypeEventObject
>;

export type ObsoleteRollupTypeEventFilter =
  TypedEventFilter<ObsoleteRollupTypeEvent>;

export interface OnSequenceBatchesEventObject {
  rollupID: number;
  lastBatchSequenced: BigNumber;
}
export type OnSequenceBatchesEvent = TypedEvent<
  [number, BigNumber],
  OnSequenceBatchesEventObject
>;

export type OnSequenceBatchesEventFilter =
  TypedEventFilter<OnSequenceBatchesEvent>;

export interface OverridePendingStateEventObject {
  rollupID: number;
  numBatch: BigNumber;
  stateRoot: string;
  exitRoot: string;
  aggregator: string;
}
export type OverridePendingStateEvent = TypedEvent<
  [number, BigNumber, string, string, string],
  OverridePendingStateEventObject
>;

export type OverridePendingStateEventFilter =
  TypedEventFilter<OverridePendingStateEvent>;

export interface ProveNonDeterministicPendingStateEventObject {
  storedStateRoot: string;
  provedStateRoot: string;
}
export type ProveNonDeterministicPendingStateEvent = TypedEvent<
  [string, string],
  ProveNonDeterministicPendingStateEventObject
>;

export type ProveNonDeterministicPendingStateEventFilter =
  TypedEventFilter<ProveNonDeterministicPendingStateEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetBatchFeeEventObject {
  newBatchFee: BigNumber;
}
export type SetBatchFeeEvent = TypedEvent<[BigNumber], SetBatchFeeEventObject>;

export type SetBatchFeeEventFilter = TypedEventFilter<SetBatchFeeEvent>;

export interface SetMultiplierBatchFeeEventObject {
  newMultiplierBatchFee: number;
}
export type SetMultiplierBatchFeeEvent = TypedEvent<
  [number],
  SetMultiplierBatchFeeEventObject
>;

export type SetMultiplierBatchFeeEventFilter =
  TypedEventFilter<SetMultiplierBatchFeeEvent>;

export interface SetPendingStateTimeoutEventObject {
  newPendingStateTimeout: BigNumber;
}
export type SetPendingStateTimeoutEvent = TypedEvent<
  [BigNumber],
  SetPendingStateTimeoutEventObject
>;

export type SetPendingStateTimeoutEventFilter =
  TypedEventFilter<SetPendingStateTimeoutEvent>;

export interface SetTrustedAggregatorEventObject {
  newTrustedAggregator: string;
}
export type SetTrustedAggregatorEvent = TypedEvent<
  [string],
  SetTrustedAggregatorEventObject
>;

export type SetTrustedAggregatorEventFilter =
  TypedEventFilter<SetTrustedAggregatorEvent>;

export interface SetTrustedAggregatorTimeoutEventObject {
  newTrustedAggregatorTimeout: BigNumber;
}
export type SetTrustedAggregatorTimeoutEvent = TypedEvent<
  [BigNumber],
  SetTrustedAggregatorTimeoutEventObject
>;

export type SetTrustedAggregatorTimeoutEventFilter =
  TypedEventFilter<SetTrustedAggregatorTimeoutEvent>;

export interface SetVerifyBatchTimeTargetEventObject {
  newVerifyBatchTimeTarget: BigNumber;
}
export type SetVerifyBatchTimeTargetEvent = TypedEvent<
  [BigNumber],
  SetVerifyBatchTimeTargetEventObject
>;

export type SetVerifyBatchTimeTargetEventFilter =
  TypedEventFilter<SetVerifyBatchTimeTargetEvent>;

export interface UpdateRollupEventObject {
  rollupID: number;
  newRollupTypeID: number;
  lastVerifiedBatchBeforeUpgrade: BigNumber;
}
export type UpdateRollupEvent = TypedEvent<
  [number, number, BigNumber],
  UpdateRollupEventObject
>;

export type UpdateRollupEventFilter = TypedEventFilter<UpdateRollupEvent>;

export interface VerifyBatchesEventObject {
  rollupID: number;
  numBatch: BigNumber;
  stateRoot: string;
  exitRoot: string;
  aggregator: string;
}
export type VerifyBatchesEvent = TypedEvent<
  [number, BigNumber, string, string, string],
  VerifyBatchesEventObject
>;

export type VerifyBatchesEventFilter = TypedEventFilter<VerifyBatchesEvent>;

export interface VerifyBatchesTrustedAggregatorEventObject {
  rollupID: number;
  numBatch: BigNumber;
  stateRoot: string;
  exitRoot: string;
  aggregator: string;
}
export type VerifyBatchesTrustedAggregatorEvent = TypedEvent<
  [number, BigNumber, string, string, string],
  VerifyBatchesTrustedAggregatorEventObject
>;

export type VerifyBatchesTrustedAggregatorEventFilter =
  TypedEventFilter<VerifyBatchesTrustedAggregatorEvent>;

export interface RollupManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addExistingRollup(
      rollupAddress: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewRollupType(
      consensusImplementation: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    calculateRewardPerBatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainIDToRollupID(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { rollupID: number }>;

    consolidatePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewRollup(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBatchFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForcedBatchFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInputSnarkBytes(
      rollupID: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      oldStateRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastVerifiedBatch(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRollupBatchNumToStateRoot(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRollupExitRoot(overrides?: CallOverrides): Promise<[string]>;

    getRollupPendingStateTransitions(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LegacyZKEVMStateVariables.PendingStateStructOutput]>;

    getRollupSequencedBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LegacyZKEVMStateVariables.SequencedBatchDataStructOutput]>;

    globalExitRootManager(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      trustedAggregator: PromiseOrValue<string>,
      _pendingStateTimeout: PromiseOrValue<BigNumberish>,
      _trustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      timelock: PromiseOrValue<string>,
      emergencyCouncil: PromiseOrValue<string>,
      polygonZkEVM: PromiseOrValue<string>,
      zkEVMVerifier: PromiseOrValue<string>,
      zkEVMForkID: PromiseOrValue<BigNumberish>,
      zkEVMChainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEmergencyState(overrides?: CallOverrides): Promise<[boolean]>;

    isPendingStateConsolidable(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastAggregationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplierBatchFee(overrides?: CallOverrides): Promise<[number]>;

    obsoleteRollupType(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onSequenceBatches(
      newSequencedBatches: PromiseOrValue<BigNumberish>,
      newAccInputHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    overridePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingStateTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    pol(overrides?: CallOverrides): Promise<[string]>;

    proveNonDeterministicPendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollupAddressToID(
      rollupAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { rollupID: number }>;

    rollupCount(overrides?: CallOverrides): Promise<[number]>;

    rollupIDToRollupData(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        rollupContract: string;
        chainID: BigNumber;
        verifier: string;
        forkID: BigNumber;
        lastLocalExitRoot: string;
        lastBatchSequenced: BigNumber;
        lastVerifiedBatch: BigNumber;
        lastPendingState: BigNumber;
        lastPendingStateConsolidated: BigNumber;
        lastVerifiedBatchBeforeUpgrade: BigNumber;
        rollupTypeID: BigNumber;
        rollupCompatibilityID: number;
      }
    >;

    rollupTypeCount(overrides?: CallOverrides): Promise<[number]>;

    rollupTypeMap(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, boolean, string] & {
        consensusImplementation: string;
        verifier: string;
        forkID: BigNumber;
        rollupCompatibilityID: number;
        obsolete: boolean;
        genesis: string;
      }
    >;

    setBatchFee(
      newBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMultiplierBatchFee(
      newMultiplierBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingStateTimeout(
      newPendingStateTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedAggregatorTimeout(
      newTrustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifyBatchTimeTarget(
      newVerifyBatchTimeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSequencedBatches(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVerifiedBatches(overrides?: CallOverrides): Promise<[BigNumber]>;

    trustedAggregatorTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateRollup(
      rollupContract: PromiseOrValue<string>,
      newRollupTypeID: PromiseOrValue<BigNumberish>,
      upgradeData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyBatchTimeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifyBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyBatchesTrustedAggregator(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  activateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addExistingRollup(
    rollupAddress: PromiseOrValue<string>,
    verifier: PromiseOrValue<string>,
    forkID: PromiseOrValue<BigNumberish>,
    chainID: PromiseOrValue<BigNumberish>,
    genesis: PromiseOrValue<BytesLike>,
    rollupCompatibilityID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewRollupType(
    consensusImplementation: PromiseOrValue<string>,
    verifier: PromiseOrValue<string>,
    forkID: PromiseOrValue<BigNumberish>,
    rollupCompatibilityID: PromiseOrValue<BigNumberish>,
    genesis: PromiseOrValue<BytesLike>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAddress(overrides?: CallOverrides): Promise<string>;

  calculateRewardPerBatch(overrides?: CallOverrides): Promise<BigNumber>;

  chainIDToRollupID(
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  consolidatePendingState(
    rollupID: PromiseOrValue<BigNumberish>,
    pendingStateNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewRollup(
    rollupTypeID: PromiseOrValue<BigNumberish>,
    chainID: PromiseOrValue<BigNumberish>,
    admin: PromiseOrValue<string>,
    sequencer: PromiseOrValue<string>,
    gasTokenAddress: PromiseOrValue<string>,
    sequencerURL: PromiseOrValue<string>,
    networkName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

  getForcedBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

  getInputSnarkBytes(
    rollupID: PromiseOrValue<BigNumberish>,
    initNumBatch: PromiseOrValue<BigNumberish>,
    finalNewBatch: PromiseOrValue<BigNumberish>,
    newLocalExitRoot: PromiseOrValue<BytesLike>,
    oldStateRoot: PromiseOrValue<BytesLike>,
    newStateRoot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastVerifiedBatch(
    rollupID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRollupBatchNumToStateRoot(
    rollupID: PromiseOrValue<BigNumberish>,
    batchNum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRollupExitRoot(overrides?: CallOverrides): Promise<string>;

  getRollupPendingStateTransitions(
    rollupID: PromiseOrValue<BigNumberish>,
    batchNum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LegacyZKEVMStateVariables.PendingStateStructOutput>;

  getRollupSequencedBatches(
    rollupID: PromiseOrValue<BigNumberish>,
    batchNum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LegacyZKEVMStateVariables.SequencedBatchDataStructOutput>;

  globalExitRootManager(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    trustedAggregator: PromiseOrValue<string>,
    _pendingStateTimeout: PromiseOrValue<BigNumberish>,
    _trustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
    admin: PromiseOrValue<string>,
    timelock: PromiseOrValue<string>,
    emergencyCouncil: PromiseOrValue<string>,
    polygonZkEVM: PromiseOrValue<string>,
    zkEVMVerifier: PromiseOrValue<string>,
    zkEVMForkID: PromiseOrValue<BigNumberish>,
    zkEVMChainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEmergencyState(overrides?: CallOverrides): Promise<boolean>;

  isPendingStateConsolidable(
    rollupID: PromiseOrValue<BigNumberish>,
    pendingStateNum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastAggregationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  multiplierBatchFee(overrides?: CallOverrides): Promise<number>;

  obsoleteRollupType(
    rollupTypeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onSequenceBatches(
    newSequencedBatches: PromiseOrValue<BigNumberish>,
    newAccInputHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  overridePendingState(
    rollupID: PromiseOrValue<BigNumberish>,
    initPendingStateNum: PromiseOrValue<BigNumberish>,
    finalPendingStateNum: PromiseOrValue<BigNumberish>,
    initNumBatch: PromiseOrValue<BigNumberish>,
    finalNewBatch: PromiseOrValue<BigNumberish>,
    newLocalExitRoot: PromiseOrValue<BytesLike>,
    newStateRoot: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingStateTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  pol(overrides?: CallOverrides): Promise<string>;

  proveNonDeterministicPendingState(
    rollupID: PromiseOrValue<BigNumberish>,
    initPendingStateNum: PromiseOrValue<BigNumberish>,
    finalPendingStateNum: PromiseOrValue<BigNumberish>,
    initNumBatch: PromiseOrValue<BigNumberish>,
    finalNewBatch: PromiseOrValue<BigNumberish>,
    newLocalExitRoot: PromiseOrValue<BytesLike>,
    newStateRoot: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollupAddressToID(
    rollupAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  rollupCount(overrides?: CallOverrides): Promise<number>;

  rollupIDToRollupData(
    rollupID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      rollupContract: string;
      chainID: BigNumber;
      verifier: string;
      forkID: BigNumber;
      lastLocalExitRoot: string;
      lastBatchSequenced: BigNumber;
      lastVerifiedBatch: BigNumber;
      lastPendingState: BigNumber;
      lastPendingStateConsolidated: BigNumber;
      lastVerifiedBatchBeforeUpgrade: BigNumber;
      rollupTypeID: BigNumber;
      rollupCompatibilityID: number;
    }
  >;

  rollupTypeCount(overrides?: CallOverrides): Promise<number>;

  rollupTypeMap(
    rollupTypeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, boolean, string] & {
      consensusImplementation: string;
      verifier: string;
      forkID: BigNumber;
      rollupCompatibilityID: number;
      obsolete: boolean;
      genesis: string;
    }
  >;

  setBatchFee(
    newBatchFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMultiplierBatchFee(
    newMultiplierBatchFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingStateTimeout(
    newPendingStateTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedAggregatorTimeout(
    newTrustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifyBatchTimeTarget(
    newVerifyBatchTimeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSequencedBatches(overrides?: CallOverrides): Promise<BigNumber>;

  totalVerifiedBatches(overrides?: CallOverrides): Promise<BigNumber>;

  trustedAggregatorTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  updateRollup(
    rollupContract: PromiseOrValue<string>,
    newRollupTypeID: PromiseOrValue<BigNumberish>,
    upgradeData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyBatchTimeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  verifyBatches(
    rollupID: PromiseOrValue<BigNumberish>,
    pendingStateNum: PromiseOrValue<BigNumberish>,
    initNumBatch: PromiseOrValue<BigNumberish>,
    finalNewBatch: PromiseOrValue<BigNumberish>,
    newLocalExitRoot: PromiseOrValue<BytesLike>,
    newStateRoot: PromiseOrValue<BytesLike>,
    beneficiary: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyBatchesTrustedAggregator(
    rollupID: PromiseOrValue<BigNumberish>,
    pendingStateNum: PromiseOrValue<BigNumberish>,
    initNumBatch: PromiseOrValue<BigNumberish>,
    finalNewBatch: PromiseOrValue<BigNumberish>,
    newLocalExitRoot: PromiseOrValue<BytesLike>,
    newStateRoot: PromiseOrValue<BytesLike>,
    beneficiary: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    activateEmergencyState(overrides?: CallOverrides): Promise<void>;

    addExistingRollup(
      rollupAddress: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewRollupType(
      consensusImplementation: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeAddress(overrides?: CallOverrides): Promise<string>;

    calculateRewardPerBatch(overrides?: CallOverrides): Promise<BigNumber>;

    chainIDToRollupID(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    consolidatePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewRollup(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateEmergencyState(overrides?: CallOverrides): Promise<void>;

    getBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    getForcedBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    getInputSnarkBytes(
      rollupID: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      oldStateRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastVerifiedBatch(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRollupBatchNumToStateRoot(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRollupExitRoot(overrides?: CallOverrides): Promise<string>;

    getRollupPendingStateTransitions(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LegacyZKEVMStateVariables.PendingStateStructOutput>;

    getRollupSequencedBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LegacyZKEVMStateVariables.SequencedBatchDataStructOutput>;

    globalExitRootManager(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      trustedAggregator: PromiseOrValue<string>,
      _pendingStateTimeout: PromiseOrValue<BigNumberish>,
      _trustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      timelock: PromiseOrValue<string>,
      emergencyCouncil: PromiseOrValue<string>,
      polygonZkEVM: PromiseOrValue<string>,
      zkEVMVerifier: PromiseOrValue<string>,
      zkEVMForkID: PromiseOrValue<BigNumberish>,
      zkEVMChainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmergencyState(overrides?: CallOverrides): Promise<boolean>;

    isPendingStateConsolidable(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastAggregationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierBatchFee(overrides?: CallOverrides): Promise<number>;

    obsoleteRollupType(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onSequenceBatches(
      newSequencedBatches: PromiseOrValue<BigNumberish>,
      newAccInputHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overridePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pendingStateTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    pol(overrides?: CallOverrides): Promise<string>;

    proveNonDeterministicPendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rollupAddressToID(
      rollupAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    rollupCount(overrides?: CallOverrides): Promise<number>;

    rollupIDToRollupData(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        rollupContract: string;
        chainID: BigNumber;
        verifier: string;
        forkID: BigNumber;
        lastLocalExitRoot: string;
        lastBatchSequenced: BigNumber;
        lastVerifiedBatch: BigNumber;
        lastPendingState: BigNumber;
        lastPendingStateConsolidated: BigNumber;
        lastVerifiedBatchBeforeUpgrade: BigNumber;
        rollupTypeID: BigNumber;
        rollupCompatibilityID: number;
      }
    >;

    rollupTypeCount(overrides?: CallOverrides): Promise<number>;

    rollupTypeMap(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, boolean, string] & {
        consensusImplementation: string;
        verifier: string;
        forkID: BigNumber;
        rollupCompatibilityID: number;
        obsolete: boolean;
        genesis: string;
      }
    >;

    setBatchFee(
      newBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplierBatchFee(
      newMultiplierBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingStateTimeout(
      newPendingStateTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedAggregatorTimeout(
      newTrustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifyBatchTimeTarget(
      newVerifyBatchTimeTarget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSequencedBatches(overrides?: CallOverrides): Promise<BigNumber>;

    totalVerifiedBatches(overrides?: CallOverrides): Promise<BigNumber>;

    trustedAggregatorTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    updateRollup(
      rollupContract: PromiseOrValue<string>,
      newRollupTypeID: PromiseOrValue<BigNumberish>,
      upgradeData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyBatchTimeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    verifyBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyBatchesTrustedAggregator(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddExistingRollup(uint32,uint64,address,uint64,uint8,uint64)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      forkID?: null,
      rollupAddress?: null,
      chainID?: null,
      rollupCompatibilityID?: null,
      lastVerifiedBatchBeforeUpgrade?: null
    ): AddExistingRollupEventFilter;
    AddExistingRollup(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      forkID?: null,
      rollupAddress?: null,
      chainID?: null,
      rollupCompatibilityID?: null,
      lastVerifiedBatchBeforeUpgrade?: null
    ): AddExistingRollupEventFilter;

    "AddNewRollupType(uint32,address,address,uint64,uint8,bytes32,string)"(
      rollupTypeID?: PromiseOrValue<BigNumberish> | null,
      consensusImplementation?: null,
      verifier?: null,
      forkID?: null,
      rollupCompatibilityID?: null,
      genesis?: null,
      description?: null
    ): AddNewRollupTypeEventFilter;
    AddNewRollupType(
      rollupTypeID?: PromiseOrValue<BigNumberish> | null,
      consensusImplementation?: null,
      verifier?: null,
      forkID?: null,
      rollupCompatibilityID?: null,
      genesis?: null,
      description?: null
    ): AddNewRollupTypeEventFilter;

    "ConsolidatePendingState(uint32,uint64,bytes32,bytes32,uint64)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      pendingStateNum?: null
    ): ConsolidatePendingStateEventFilter;
    ConsolidatePendingState(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      pendingStateNum?: null
    ): ConsolidatePendingStateEventFilter;

    "CreateNewRollup(uint32,uint32,address,uint64,address)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      rollupTypeID?: null,
      rollupAddress?: null,
      chainID?: null,
      gasTokenAddress?: null
    ): CreateNewRollupEventFilter;
    CreateNewRollup(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      rollupTypeID?: null,
      rollupAddress?: null,
      chainID?: null,
      gasTokenAddress?: null
    ): CreateNewRollupEventFilter;

    "EmergencyStateActivated()"(): EmergencyStateActivatedEventFilter;
    EmergencyStateActivated(): EmergencyStateActivatedEventFilter;

    "EmergencyStateDeactivated()"(): EmergencyStateDeactivatedEventFilter;
    EmergencyStateDeactivated(): EmergencyStateDeactivatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ObsoleteRollupType(uint32)"(
      rollupTypeID?: PromiseOrValue<BigNumberish> | null
    ): ObsoleteRollupTypeEventFilter;
    ObsoleteRollupType(
      rollupTypeID?: PromiseOrValue<BigNumberish> | null
    ): ObsoleteRollupTypeEventFilter;

    "OnSequenceBatches(uint32,uint64)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      lastBatchSequenced?: null
    ): OnSequenceBatchesEventFilter;
    OnSequenceBatches(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      lastBatchSequenced?: null
    ): OnSequenceBatchesEventFilter;

    "OverridePendingState(uint32,uint64,bytes32,bytes32,address)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: null
    ): OverridePendingStateEventFilter;
    OverridePendingState(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: null
    ): OverridePendingStateEventFilter;

    "ProveNonDeterministicPendingState(bytes32,bytes32)"(
      storedStateRoot?: null,
      provedStateRoot?: null
    ): ProveNonDeterministicPendingStateEventFilter;
    ProveNonDeterministicPendingState(
      storedStateRoot?: null,
      provedStateRoot?: null
    ): ProveNonDeterministicPendingStateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetBatchFee(uint256)"(newBatchFee?: null): SetBatchFeeEventFilter;
    SetBatchFee(newBatchFee?: null): SetBatchFeeEventFilter;

    "SetMultiplierBatchFee(uint16)"(
      newMultiplierBatchFee?: null
    ): SetMultiplierBatchFeeEventFilter;
    SetMultiplierBatchFee(
      newMultiplierBatchFee?: null
    ): SetMultiplierBatchFeeEventFilter;

    "SetPendingStateTimeout(uint64)"(
      newPendingStateTimeout?: null
    ): SetPendingStateTimeoutEventFilter;
    SetPendingStateTimeout(
      newPendingStateTimeout?: null
    ): SetPendingStateTimeoutEventFilter;

    "SetTrustedAggregator(address)"(
      newTrustedAggregator?: null
    ): SetTrustedAggregatorEventFilter;
    SetTrustedAggregator(
      newTrustedAggregator?: null
    ): SetTrustedAggregatorEventFilter;

    "SetTrustedAggregatorTimeout(uint64)"(
      newTrustedAggregatorTimeout?: null
    ): SetTrustedAggregatorTimeoutEventFilter;
    SetTrustedAggregatorTimeout(
      newTrustedAggregatorTimeout?: null
    ): SetTrustedAggregatorTimeoutEventFilter;

    "SetVerifyBatchTimeTarget(uint64)"(
      newVerifyBatchTimeTarget?: null
    ): SetVerifyBatchTimeTargetEventFilter;
    SetVerifyBatchTimeTarget(
      newVerifyBatchTimeTarget?: null
    ): SetVerifyBatchTimeTargetEventFilter;

    "UpdateRollup(uint32,uint32,uint64)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      newRollupTypeID?: null,
      lastVerifiedBatchBeforeUpgrade?: null
    ): UpdateRollupEventFilter;
    UpdateRollup(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      newRollupTypeID?: null,
      lastVerifiedBatchBeforeUpgrade?: null
    ): UpdateRollupEventFilter;

    "VerifyBatches(uint32,uint64,bytes32,bytes32,address)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesEventFilter;
    VerifyBatches(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesEventFilter;

    "VerifyBatchesTrustedAggregator(uint32,uint64,bytes32,bytes32,address)"(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesTrustedAggregatorEventFilter;
    VerifyBatchesTrustedAggregator(
      rollupID?: PromiseOrValue<BigNumberish> | null,
      numBatch?: null,
      stateRoot?: null,
      exitRoot?: null,
      aggregator?: PromiseOrValue<string> | null
    ): VerifyBatchesTrustedAggregatorEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addExistingRollup(
      rollupAddress: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewRollupType(
      consensusImplementation: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardPerBatch(overrides?: CallOverrides): Promise<BigNumber>;

    chainIDToRollupID(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consolidatePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewRollup(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    getForcedBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    getInputSnarkBytes(
      rollupID: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      oldStateRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastVerifiedBatch(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRollupBatchNumToStateRoot(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRollupExitRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupPendingStateTransitions(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRollupSequencedBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalExitRootManager(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      trustedAggregator: PromiseOrValue<string>,
      _pendingStateTimeout: PromiseOrValue<BigNumberish>,
      _trustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      timelock: PromiseOrValue<string>,
      emergencyCouncil: PromiseOrValue<string>,
      polygonZkEVM: PromiseOrValue<string>,
      zkEVMVerifier: PromiseOrValue<string>,
      zkEVMForkID: PromiseOrValue<BigNumberish>,
      zkEVMChainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEmergencyState(overrides?: CallOverrides): Promise<BigNumber>;

    isPendingStateConsolidable(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastAggregationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierBatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    obsoleteRollupType(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onSequenceBatches(
      newSequencedBatches: PromiseOrValue<BigNumberish>,
      newAccInputHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    overridePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingStateTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    pol(overrides?: CallOverrides): Promise<BigNumber>;

    proveNonDeterministicPendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollupAddressToID(
      rollupAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollupCount(overrides?: CallOverrides): Promise<BigNumber>;

    rollupIDToRollupData(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollupTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    rollupTypeMap(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBatchFee(
      newBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMultiplierBatchFee(
      newMultiplierBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingStateTimeout(
      newPendingStateTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedAggregatorTimeout(
      newTrustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifyBatchTimeTarget(
      newVerifyBatchTimeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSequencedBatches(overrides?: CallOverrides): Promise<BigNumber>;

    totalVerifiedBatches(overrides?: CallOverrides): Promise<BigNumber>;

    trustedAggregatorTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    updateRollup(
      rollupContract: PromiseOrValue<string>,
      newRollupTypeID: PromiseOrValue<BigNumberish>,
      upgradeData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyBatchTimeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    verifyBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyBatchesTrustedAggregator(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addExistingRollup(
      rollupAddress: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewRollupType(
      consensusImplementation: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      forkID: PromiseOrValue<BigNumberish>,
      rollupCompatibilityID: PromiseOrValue<BigNumberish>,
      genesis: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewardPerBatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainIDToRollupID(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consolidatePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewRollup(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      sequencer: PromiseOrValue<string>,
      gasTokenAddress: PromiseOrValue<string>,
      sequencerURL: PromiseOrValue<string>,
      networkName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBatchFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getForcedBatchFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInputSnarkBytes(
      rollupID: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      oldStateRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastVerifiedBatch(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupBatchNumToStateRoot(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupExitRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRollupPendingStateTransitions(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupSequencedBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      batchNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalExitRootManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      trustedAggregator: PromiseOrValue<string>,
      _pendingStateTimeout: PromiseOrValue<BigNumberish>,
      _trustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      timelock: PromiseOrValue<string>,
      emergencyCouncil: PromiseOrValue<string>,
      polygonZkEVM: PromiseOrValue<string>,
      zkEVMVerifier: PromiseOrValue<string>,
      zkEVMForkID: PromiseOrValue<BigNumberish>,
      zkEVMChainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEmergencyState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPendingStateConsolidable(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAggregationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplierBatchFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    obsoleteRollupType(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onSequenceBatches(
      newSequencedBatches: PromiseOrValue<BigNumberish>,
      newAccInputHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    overridePendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingStateTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveNonDeterministicPendingState(
      rollupID: PromiseOrValue<BigNumberish>,
      initPendingStateNum: PromiseOrValue<BigNumberish>,
      finalPendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollupAddressToID(
      rollupAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollupCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupIDToRollupData(
      rollupID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollupTypeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupTypeMap(
      rollupTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBatchFee(
      newBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMultiplierBatchFee(
      newMultiplierBatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingStateTimeout(
      newPendingStateTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedAggregatorTimeout(
      newTrustedAggregatorTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifyBatchTimeTarget(
      newVerifyBatchTimeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSequencedBatches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVerifiedBatches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedAggregatorTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRollup(
      rollupContract: PromiseOrValue<string>,
      newRollupTypeID: PromiseOrValue<BigNumberish>,
      upgradeData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyBatchTimeTarget(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBatches(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyBatchesTrustedAggregator(
      rollupID: PromiseOrValue<BigNumberish>,
      pendingStateNum: PromiseOrValue<BigNumberish>,
      initNumBatch: PromiseOrValue<BigNumberish>,
      finalNewBatch: PromiseOrValue<BigNumberish>,
      newLocalExitRoot: PromiseOrValue<BytesLike>,
      newStateRoot: PromiseOrValue<BytesLike>,
      beneficiary: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
