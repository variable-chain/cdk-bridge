/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    "activateEmergencyState()": FunctionFragment;
    "bridgeAsset(uint32,address,uint256,address,bool,bytes)": FunctionFragment;
    "bridgeMessage(uint32,address,bool,bytes)": FunctionFragment;
    "claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)": FunctionFragment;
    "claimMessage(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)": FunctionFragment;
    "claimedBitMap(uint256)": FunctionFragment;
    "deactivateEmergencyState()": FunctionFragment;
    "depositCount()": FunctionFragment;
    "getDepositRoot()": FunctionFragment;
    "getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)": FunctionFragment;
    "getTokenWrappedAddress(uint32,address)": FunctionFragment;
    "globalExitRootManager()": FunctionFragment;
    "initialize(uint32,address,address)": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "isEmergencyState()": FunctionFragment;
    "lastUpdatedDepositCount()": FunctionFragment;
    "networkID()": FunctionFragment;
    "polygonZkEVMaddress()": FunctionFragment;
    "precalculatedWrapperAddress(uint32,address,string,string,uint8)": FunctionFragment;
    "tokenInfoToWrappedToken(bytes32)": FunctionFragment;
    "updateGlobalExitRoot()": FunctionFragment;
    "verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)": FunctionFragment;
    "wrappedTokenToTokenInfo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergencyState"
      | "bridgeAsset"
      | "bridgeMessage"
      | "claimAsset"
      | "claimMessage"
      | "claimedBitMap"
      | "deactivateEmergencyState"
      | "depositCount"
      | "getDepositRoot"
      | "getLeafValue"
      | "getTokenWrappedAddress"
      | "globalExitRootManager"
      | "initialize"
      | "isClaimed"
      | "isEmergencyState"
      | "lastUpdatedDepositCount"
      | "networkID"
      | "polygonZkEVMaddress"
      | "precalculatedWrapperAddress"
      | "tokenInfoToWrappedToken"
      | "updateGlobalExitRoot"
      | "verifyMerkleProof"
      | "wrappedTokenToTokenInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAsset",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMessage",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedBitMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeafValue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenWrappedAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalExitRootManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedDepositCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "networkID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "polygonZkEVMaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "precalculatedWrapperAddress",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfoToWrappedToken",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalExitRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleProof",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokenToTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedBitMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeafValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenWrappedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalExitRootManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedDepositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "polygonZkEVMaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "precalculatedWrapperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInfoToWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalExitRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokenToTokenInfo",
    data: BytesLike
  ): Result;

  events: {
    "BridgeEvent(uint8,uint32,address,uint32,address,uint256,bytes,uint32)": EventFragment;
    "ClaimEvent(uint32,uint32,address,address,uint256)": EventFragment;
    "EmergencyStateActivated()": EventFragment;
    "EmergencyStateDeactivated()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewWrappedToken(uint32,address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStateActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStateDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWrappedToken"): EventFragment;
}

export interface BridgeEventEventObject {
  leafType: number;
  originNetwork: number;
  originAddress: string;
  destinationNetwork: number;
  destinationAddress: string;
  amount: BigNumber;
  metadata: string;
  depositCount: number;
}
export type BridgeEventEvent = TypedEvent<
  [number, number, string, number, string, BigNumber, string, number],
  BridgeEventEventObject
>;

export type BridgeEventEventFilter = TypedEventFilter<BridgeEventEvent>;

export interface ClaimEventEventObject {
  index: number;
  originNetwork: number;
  originAddress: string;
  destinationAddress: string;
  amount: BigNumber;
}
export type ClaimEventEvent = TypedEvent<
  [number, number, string, string, BigNumber],
  ClaimEventEventObject
>;

export type ClaimEventEventFilter = TypedEventFilter<ClaimEventEvent>;

export interface EmergencyStateActivatedEventObject {}
export type EmergencyStateActivatedEvent = TypedEvent<
  [],
  EmergencyStateActivatedEventObject
>;

export type EmergencyStateActivatedEventFilter =
  TypedEventFilter<EmergencyStateActivatedEvent>;

export interface EmergencyStateDeactivatedEventObject {}
export type EmergencyStateDeactivatedEvent = TypedEvent<
  [],
  EmergencyStateDeactivatedEventObject
>;

export type EmergencyStateDeactivatedEventFilter =
  TypedEventFilter<EmergencyStateDeactivatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewWrappedTokenEventObject {
  originNetwork: number;
  originTokenAddress: string;
  wrappedTokenAddress: string;
  metadata: string;
}
export type NewWrappedTokenEvent = TypedEvent<
  [number, string, string, string],
  NewWrappedTokenEventObject
>;

export type NewWrappedTokenEventFilter = TypedEventFilter<NewWrappedTokenEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedBitMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositRoot(overrides?: CallOverrides): Promise<[string]>;

    getLeafValue(
      leafType: PromiseOrValue<BigNumberish>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenWrappedAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalExitRootManager(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _networkID: PromiseOrValue<BigNumberish>,
      _globalExitRootManager: PromiseOrValue<string>,
      _polygonZkEVMaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isClaimed(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEmergencyState(overrides?: CallOverrides): Promise<[boolean]>;

    lastUpdatedDepositCount(overrides?: CallOverrides): Promise<[number]>;

    networkID(overrides?: CallOverrides): Promise<[number]>;

    polygonZkEVMaddress(overrides?: CallOverrides): Promise<[string]>;

    precalculatedWrapperAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenInfoToWrappedToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyMerkleProof(
      leafHash: PromiseOrValue<BytesLike>,
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wrappedTokenToTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { originNetwork: number; originTokenAddress: string }
    >;
  };

  activateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAsset(
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
    permitData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeMessage(
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAsset(
    smtProof: PromiseOrValue<BytesLike>[],
    index: PromiseOrValue<BigNumberish>,
    mainnetExitRoot: PromiseOrValue<BytesLike>,
    rollupExitRoot: PromiseOrValue<BytesLike>,
    originNetwork: PromiseOrValue<BigNumberish>,
    originTokenAddress: PromiseOrValue<string>,
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMessage(
    smtProof: PromiseOrValue<BytesLike>[],
    index: PromiseOrValue<BigNumberish>,
    mainnetExitRoot: PromiseOrValue<BytesLike>,
    rollupExitRoot: PromiseOrValue<BytesLike>,
    originNetwork: PromiseOrValue<BigNumberish>,
    originAddress: PromiseOrValue<string>,
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedBitMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deactivateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositRoot(overrides?: CallOverrides): Promise<string>;

  getLeafValue(
    leafType: PromiseOrValue<BigNumberish>,
    originNetwork: PromiseOrValue<BigNumberish>,
    originAddress: PromiseOrValue<string>,
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    metadataHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenWrappedAddress(
    originNetwork: PromiseOrValue<BigNumberish>,
    originTokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalExitRootManager(overrides?: CallOverrides): Promise<string>;

  initialize(
    _networkID: PromiseOrValue<BigNumberish>,
    _globalExitRootManager: PromiseOrValue<string>,
    _polygonZkEVMaddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isClaimed(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEmergencyState(overrides?: CallOverrides): Promise<boolean>;

  lastUpdatedDepositCount(overrides?: CallOverrides): Promise<number>;

  networkID(overrides?: CallOverrides): Promise<number>;

  polygonZkEVMaddress(overrides?: CallOverrides): Promise<string>;

  precalculatedWrapperAddress(
    originNetwork: PromiseOrValue<BigNumberish>,
    originTokenAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenInfoToWrappedToken(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateGlobalExitRoot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyMerkleProof(
    leafHash: PromiseOrValue<BytesLike>,
    smtProof: PromiseOrValue<BytesLike>[],
    index: PromiseOrValue<BigNumberish>,
    root: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wrappedTokenToTokenInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, string] & { originNetwork: number; originTokenAddress: string }
  >;

  callStatic: {
    activateEmergencyState(overrides?: CallOverrides): Promise<void>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedBitMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEmergencyState(overrides?: CallOverrides): Promise<void>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositRoot(overrides?: CallOverrides): Promise<string>;

    getLeafValue(
      leafType: PromiseOrValue<BigNumberish>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenWrappedAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalExitRootManager(overrides?: CallOverrides): Promise<string>;

    initialize(
      _networkID: PromiseOrValue<BigNumberish>,
      _globalExitRootManager: PromiseOrValue<string>,
      _polygonZkEVMaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimed(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEmergencyState(overrides?: CallOverrides): Promise<boolean>;

    lastUpdatedDepositCount(overrides?: CallOverrides): Promise<number>;

    networkID(overrides?: CallOverrides): Promise<number>;

    polygonZkEVMaddress(overrides?: CallOverrides): Promise<string>;

    precalculatedWrapperAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenInfoToWrappedToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateGlobalExitRoot(overrides?: CallOverrides): Promise<void>;

    verifyMerkleProof(
      leafHash: PromiseOrValue<BytesLike>,
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wrappedTokenToTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { originNetwork: number; originTokenAddress: string }
    >;
  };

  filters: {
    "BridgeEvent(uint8,uint32,address,uint32,address,uint256,bytes,uint32)"(
      leafType?: null,
      originNetwork?: null,
      originAddress?: null,
      destinationNetwork?: null,
      destinationAddress?: null,
      amount?: null,
      metadata?: null,
      depositCount?: null
    ): BridgeEventEventFilter;
    BridgeEvent(
      leafType?: null,
      originNetwork?: null,
      originAddress?: null,
      destinationNetwork?: null,
      destinationAddress?: null,
      amount?: null,
      metadata?: null,
      depositCount?: null
    ): BridgeEventEventFilter;

    "ClaimEvent(uint32,uint32,address,address,uint256)"(
      index?: null,
      originNetwork?: null,
      originAddress?: null,
      destinationAddress?: null,
      amount?: null
    ): ClaimEventEventFilter;
    ClaimEvent(
      index?: null,
      originNetwork?: null,
      originAddress?: null,
      destinationAddress?: null,
      amount?: null
    ): ClaimEventEventFilter;

    "EmergencyStateActivated()"(): EmergencyStateActivatedEventFilter;
    EmergencyStateActivated(): EmergencyStateActivatedEventFilter;

    "EmergencyStateDeactivated()"(): EmergencyStateDeactivatedEventFilter;
    EmergencyStateDeactivated(): EmergencyStateDeactivatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewWrappedToken(uint32,address,address,bytes)"(
      originNetwork?: null,
      originTokenAddress?: null,
      wrappedTokenAddress?: null,
      metadata?: null
    ): NewWrappedTokenEventFilter;
    NewWrappedToken(
      originNetwork?: null,
      originTokenAddress?: null,
      wrappedTokenAddress?: null,
      metadata?: null
    ): NewWrappedTokenEventFilter;
  };

  estimateGas: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedBitMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getLeafValue(
      leafType: PromiseOrValue<BigNumberish>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenWrappedAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalExitRootManager(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _networkID: PromiseOrValue<BigNumberish>,
      _globalExitRootManager: PromiseOrValue<string>,
      _polygonZkEVMaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isClaimed(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEmergencyState(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedDepositCount(overrides?: CallOverrides): Promise<BigNumber>;

    networkID(overrides?: CallOverrides): Promise<BigNumber>;

    polygonZkEVMaddress(overrides?: CallOverrides): Promise<BigNumber>;

    precalculatedWrapperAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfoToWrappedToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyMerkleProof(
      leafHash: PromiseOrValue<BytesLike>,
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedTokenToTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedBitMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeafValue(
      leafType: PromiseOrValue<BigNumberish>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenWrappedAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalExitRootManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _networkID: PromiseOrValue<BigNumberish>,
      _globalExitRootManager: PromiseOrValue<string>,
      _polygonZkEVMaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isClaimed(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEmergencyState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedDepositCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    polygonZkEVMaddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    precalculatedWrapperAddress(
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfoToWrappedToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyMerkleProof(
      leafHash: PromiseOrValue<BytesLike>,
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedTokenToTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
